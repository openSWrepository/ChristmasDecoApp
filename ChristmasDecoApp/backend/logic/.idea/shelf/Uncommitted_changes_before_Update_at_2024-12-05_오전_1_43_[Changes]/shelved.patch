Index: src/main/java/_1/logic/service/ImageService.java
===================================================================
diff --git a/src/main/java/_1/logic/service/ImageService.java b/src/main/java/_1/logic/service/ImageService.java
deleted file mode 100644
--- a/src/main/java/_1/logic/service/ImageService.java	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
+++ /dev/null	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
@@ -1,35 +0,0 @@
-package _1.logic.service;
-
-import _1.logic.Entity.Image;
-import _1.logic.configuration.SessionConst;
-import _1.logic.repository.ImageRepository;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.io.IOException;
-import java.util.List;
-
-@Service
-public class ImageService {
-
-    ImageHandler imageHandler = new ImageHandler();
-
-    @Autowired
-    private ImageRepository imageRepository;
-    
-    // 이미지 저장
-    public void saveImage(MultipartFile image) throws IOException {
-        String path = imageHandler.save(image);
-        Image Image = new Image();
-        Image.setPath(path);
-        Image.setNickname(SessionConst.LOGIN_NICKNAME);
-        imageRepository.save(Image);
-    }
-    
-    // 닉네임과 관련된 이미지 리턴
-    public List<Image> findByNickname(String nickname){
-        return imageRepository.findByNickname(nickname);
-    }
-
-}
\ No newline at end of file
Index: src/main/java/_1/logic/service/ImageHandler.java
===================================================================
diff --git a/src/main/java/_1/logic/service/ImageHandler.java b/src/main/java/_1/logic/service/ImageHandler.java
deleted file mode 100644
--- a/src/main/java/_1/logic/service/ImageHandler.java	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
+++ /dev/null	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
@@ -1,33 +0,0 @@
-package _1.logic.service;
-
-import org.springframework.web.multipart.MultipartFile;
-
-import java.io.File;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-public class ImageHandler {
-
-    public String save(MultipartFile image) throws IOException {
-        String fileName = getOriginName(image);
-
-        // 애플리케이션 실행 경로 기준으로 파일 저장 경로 생성
-        String basePath = System.getProperty("user.dir"); // 현재 실행 디렉토리
-        Path savePath = Paths.get(basePath, "src", "main", "resources", "static", "backimages", fileName);
-
-        // 디렉토리가 없는 경우 생성
-        Files.createDirectories(savePath.getParent());
-        image.transferTo(savePath.toFile());
-
-        System.out.println("저장된 경로 : " + savePath.toString());
-
-        return "/backimages/" + fileName;
-    }
-
-
-    private String getOriginName(MultipartFile image){
-          return image.getOriginalFilename();
-    }
-}
Index: src/main/java/_1/logic/repository/ImageRepository.java
===================================================================
diff --git a/src/main/java/_1/logic/repository/ImageRepository.java b/src/main/java/_1/logic/repository/ImageRepository.java
deleted file mode 100644
--- a/src/main/java/_1/logic/repository/ImageRepository.java	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
+++ /dev/null	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
@@ -1,14 +0,0 @@
-package _1.logic.repository;
-
-import _1.logic.Entity.Image;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.List;
-
-@Repository
-public interface ImageRepository extends JpaRepository<Image, String > {
-
-    List<Image> findByNickname(String nickname);
-
-}
Index: src/main/java/_1/logic/Entity/ImageRole.java
===================================================================
diff --git a/src/main/java/_1/logic/Entity/ImageRole.java b/src/main/java/_1/logic/Entity/ImageRole.java
deleted file mode 100644
--- a/src/main/java/_1/logic/Entity/ImageRole.java	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
+++ /dev/null	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
@@ -1,5 +0,0 @@
-package _1.logic.Entity;
-
-public enum ImageRole {
-    TREE, BACKIMAGE, DECORATION
-}
Index: src/main/java/_1/logic/Entity/Image.java
===================================================================
diff --git a/src/main/java/_1/logic/Entity/Image.java b/src/main/java/_1/logic/Entity/Image.java
deleted file mode 100644
--- a/src/main/java/_1/logic/Entity/Image.java	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
+++ /dev/null	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
@@ -1,28 +0,0 @@
-package _1.logic.Entity;
-
-import jakarta.persistence.*;
-import lombok.Getter;
-import lombok.Setter;
-
-import java.util.UUID;
-
-@Entity
-@Getter
-@Setter
-@Table(name = "image_list")
-public class Image {
-    @Id
-    @GeneratedValue(strategy = GenerationType.UUID)
-    private UUID id;
-
-    @Enumerated(EnumType.STRING)
-    private ImageRole image_role;
-    
-    private String nickname;
-    private String path;
-
-    @ManyToOne
-    @JoinColumn(name = "user_nickname")
-    private User user;
-
-}
Index: src/main/java/_1/logic/controller/ImageController.java
===================================================================
diff --git a/src/main/java/_1/logic/controller/ImageController.java b/src/main/java/_1/logic/controller/ImageController.java
deleted file mode 100644
--- a/src/main/java/_1/logic/controller/ImageController.java	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
+++ /dev/null	(revision a505d1d4fb6d020c0761009edf62b5e54b4ac405)
@@ -1,43 +0,0 @@
-package _1.logic.controller;
-
-
-import _1.logic.Entity.APIResponse;
-import _1.logic.service.ImageService;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-import org.springframework.web.multipart.MultipartFile;
-
-@RestController
-@RequestMapping("/imageAPI")
-public class ImageController {
-
-    @Autowired
-    private ImageService imageService;
-
-    // 이미지 저장 - post
-    @PostMapping("/save")
-    public ResponseEntity<?> saveImage(@RequestParam MultipartFile Image) {
-        try {
-            imageService.saveImage(Image);
-            return ResponseEntity.status(HttpStatus.CREATED)
-                    .body(new APIResponse(true, 201, "저장 성공", Image));
-        } catch (Exception e){
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
-                    .body(new APIResponse(false, 400, "저장 실패", null));
-        }
-    }
-
-    // nickname과 일치하는 저장된 이미지 불러오기 - get
-    @GetMapping("/imagelist/{nickname}")
-    public ResponseEntity<?> getImageList(@PathVariable String nickname) {
-        try {
-            return ResponseEntity.status(HttpStatus.OK)
-                    .body(new APIResponse(true, 200, "불러오기 성공", imageService.findByNickname(nickname)));
-        } catch (Exception e) {
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
-                    .body(new APIResponse(false, 400, "불러오기 실패", null));
-        }
-    }
-}
